.. _sentry_guide:

===============================================================
Install and configure a Sentry Service for OpenMOOC on a CentOS
===============================================================

Sentry Server
=============

Installation
------------

First we set the environment for Sentry. We will use virtualenv so if we don't have this python package installed we execute.


.. code-block:: bash

    yum install python-dev python-setuptools
    easy_install -U virtualenv

Now we create the environment at /var/www/sentry 

.. code-block:: bash

    virtualenv /var/www/sentry/

Activate your virtualenv:

.. code-block:: bash

    source /var/www/sentry/bin/activate

Now install Sentry (with eggs not zipped)

.. code-block:: bash

    cd /var/www/sentry/
    easy_install -Z -U sentry

PostgreSQL
..........

We gonna use postgres as Database backend so we need install and configure the database server and create the sentry database.

Install libraries

.. code-block:: bash

    yum install postgresql postgresql-devel postgresql-server postgresql-libs
    service postgresql start
    chkconfig --ass postgresql 


Create user and database

.. code-block:: bash

    su - postgres
    createuser sentry --no-createrole --no-createdb --no-superuser -P
    createdb -E UTF8 --owner=sentry sentry

Edit ``data/pg_hba.conf``
    
.. code-block:: bash

    # TYPE   DATABASE    USER       CIDR-ADDRESS        METHOD
    local    sentry      sentry                         md5
    local    all         all                            ident
    

Restart service

.. code-block:: bash

    service postgresql restart


Now return to the root user

.. code-block:: bash

   exit

And lets install the psycopg2 package

.. code-block:: bash
   
   easy_install psycopg2


Configuration
-------------

We will place the configuration file of Sentry at ``/etc/sentry.conf.py``. First of all we generate the configuration file.

.. code-block:: bash

    sentry init /etc/sentry.conf.py

And then configure it

.. code-block:: python

    import os.path

    CONF_ROOT = os.path.dirname(__file__)

    DATABASES = {
        'default': {

             'ENGINE': 'django.db.backends.postgresql_psycopg2',
             'NAME': 'sentry',
             'USER': 'sentry',
             'PASSWORD': '<password',
             'HOST': '',
             'PORT': '',
        }
    }

    ENTRY_KEY = '<secret>'  # Auogenerated by the sentry init script

    SENTRY_URL_PREFIX = 'http://logs.openmooc.org'

    SENTRY_WEB_HOST = '0.0.0.0'
    SENTRY_WEB_PORT = 9000
    SENTRY_WEB_OPTIONS = {
        'workers': 3,  # the number of gunicorn workers
        'secure_scheme_headers': {'X-FORWARDED-PROTO': 'https'},
    }

    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

    EMAIL_HOST = 'idp.openmooc.org'           # Our SMTP server
    SERVER_EMAIL = 'logs.openmooc.org'        # Our Sentry Server
    DEFAULT_FROM_EMAIL = 'logs@openmooc.org'  # Sentry Server contact  
    EMAIL_PORT = 25
    EMAIL_HOST_USER = ''
    EMAIL_HOST_PASSWORD = ''
    EMAIL_USE_TLS = False
    EMAIL_SUBJECT_PREFIX = '[Logs] '
   
    ALLOW_REGISTRATION = False

    # We will not allow social auth so we don't need configure those params:

    # http://twitter.com/apps/new
    # It's important that input a callback URL, even if its useless. We have no idea why, consult Twitter.
    TWITTER_CONSUMER_KEY = ''
    TWITTER_CONSUMER_SECRET = ''

    # http://developers.facebook.com/setup/
    FACEBOOK_APP_ID = ''
    FACEBOOK_API_SECRET = ''

    # http://code.google.com/apis/accounts/docs/OAuth2.html#Registering
    GOOGLE_OAUTH2_CLIENT_ID = ''
    GOOGLE_OAUTH2_CLIENT_SECRET = ''

    # https://github.com/settings/applications/new
    GITHUB_APP_ID = ''
    GITHUB_API_SECRET = ''

    # https://trello.com/1/appKey/generate
    TRELLO_API_KEY = ''
    TRELLO_API_SECRET = ''
    

``Note:`` We using the `postfix SMTP server of the idp.openmooc.org <https://github.com/OpenMOOC/documentation/blob/master/IdP_guide.rst#how-to-config-smtp-server>`_. Remember to add the IP of the machine with the Sentry service server to the 'mynetworks' var. And restart postfix.


Test Sentry Server
------------------

Sentry provides a built-in webserver (powered by gunicorn and eventlet) to get you off the ground quickly.

o start the webserver, you simply use ``sentry start``. If you opted to use an alternative configuration path you can pass that via the â€“config option.  ( Sentry's server runs on port 9000 by default )

.. code-block:: bash

    sentry --config=/etc/sentry.conf.py start

Configure Nginx. Set up a reverse proxy
---------------------------------------

We install nginx

.. code-block:: bash

    yum install nginx

And we configure it. Edit ``/etc/nginx/conf.d/default.conf``.

.. code-block:: bash

    location / {
    #    root   /usr/share/nginx/html;
    #    index  index.html index.htm;

         proxy_pass         http://localhost:9000;
         proxy_redirect     off;

         proxy_set_header   Host              $host;
         proxy_set_header   X-Real-IP         $remote_addr;
         proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
         proxy_set_header   X-Forwarded-Proto $scheme;
    }

Running sentry as a Service
---------------------------

We use `Supervisor <http://supervisord.org/>`_ for managing Sentry processes.


Install it.

.. code-block:: bash

    easy_install supervisor

Configure it.

.. code-block:: bash

    [supervisord]
    childlogdir = /var/www/sentry/var/log/supervisord/
    logfile = /var/www/sentry/var/log/supervisord/supervisord.log
    logfile_maxbytes = 50MB
    logfile_backups=10
    loglevel = info
    pidfile = /var/run/supervisord.pid
    nodaemon = false
    minfds = 1024
    minprocs = 200
    umask = 022
    nocleanup = true


    [inet_http_server]
    port = 9001
    username = <sentry_admin_username>
    password = <sentry_admin_password>

    [rpcinterface:supervisor]
    supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface


    [supervisorctl]
    serverurl = http://127.0.0.1:9001
    username = <sentry_admin_username>
    password = <sentry_admin_password>


    [program:sentry-web]
    directory=/var/www/sentry/
    command=/var/www/sentry/bin/sentry --config=/etc/sentry.conf.py start http
    autostart=true
    autorestart=true
    redirect_stderr=true

And now set a scriptini to manage the supervisor service. Edit ``/etc/init.d/supervisord``

.. code-block:: bash

    #!/bin/bash
    #
    # supervisord   This scripts turns supervisord on
    # Author:       Mike McGrath <mmcgrath@redhat.com> (based off yumupdatesd)
    #               Jason Koppe <jkoppe@indeed.com> adjusted to read sysconfig,
    #                   use supervisord tools to start/stop, conditionally wait
    #                   for child processes to shutdown, and startup later

    # source function library
    . /etc/rc.d/init.d/functions

    # source system settings
    [ -e /etc/sysconfig/supervisord ] && . /etc/sysconfig/supervisord

    [ -e /var/www/sentry/bin/activate ] && . /var/www/sentry/bin/activate

    RETVAL=0

    start() {
        echo "Starting supervisord: "
            if [ -e $PIDFILE ]; then
                    echo "ALREADY STARTED"
                    return 1
            fi

            # start supervisord with options from sysconfig (stuff like -c)
            supervisord $OPTIONS

            # show initial startup status
            supervisorctl $OPTIONS status

            # only create the subsyslock if we created the PIDFILE
        [ -e $PIDFILE ] && touch /var/lock/subsys/supervisord
    }

    stop() {
        echo -n "Stopping supervisord: "
        supervisorctl $OPTIONS shutdown
            if [ -n "$WAIT_FOR_SUBPROCESSES" ]; then
              echo "Waiting roughly 60 seconds for $PIDFILE to be removed after child processes exit"
            for sleep in  2 2 2 2 4 4 4 4 8 8 8 8 last; do
                if [ ! -e $PIDFILE ] ; then
                     echo "Supervisord exited as expected in under $total_sleep seconds"
                     break
                else
                     if [[ $sleep -eq "last" ]] ; then
                        echo "Supervisord still working on shutting down. We've waited roughly 60 seconds, we'll let it do its thing from here"
                        return 1
                    else
                        sleep $sleep
                        total_sleep=$(( $total_sleep + $sleep ))
                    fi
                fi
            done
        fi
        # always remove the subsys.  we might have waited a while, but just remove it at this point.
        rm -f /var/lock/subsys/supervisord
    }

    restart() {
            stop
            start
    }

    case "$1" in
        start)
            start
            RETVAL=$?
            ;;
        stop)
            stop
            RETVAL=$?
            ;;
        restart|force-reload)
            restart
            RETVAL=$?
            ;;
        reload)
            supervisorctl $OPTIONS reload
            RETVAL=$?
            ;;
        condrestart)
            [ -f /var/lock/subsys/supervisord ] && restart
            RETVAL=$?
            ;;
        status)
            supervisorctl status
            RETVAL=$?
            ;;
        *)
            echo $"Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart}"
            exit 1
    esac

    exit $RETVAL

Now we can do a test, try to start and stop the supervisord script and check if the 

    # service supervisord start
    # service supervisord stop

Try to access to http://logs.openmooc.org and check if the Sentry Server is on.

You will need to create a project for the platform that you want to do the monitor. In this case create a project fot OpenMOOC - MoocNG.


Now add the supervisor scriptini to the boot

.. code-block:: bash

    chkconfig --add supervisord


Client Sentry (raven). Monitoring the logs of our MoocNG instance
=================================================================

Installation
------------

First of all install the  raven library. Since we installed the MoocNG componnent in a virtualenv, the first step is to activate it

.. code-block:: bash

    cd /var/www/moocng
    source bin/activate

Now we need to install the raven library

    easy_install -U raven


Configuration
-------------

Add ``raven.contrib.django.raven_compat`` to your installed apps:

.. code-block:: bash

    INSTALLED_APPS = (
        ....

        'raven.contrib.django.raven_compat',
    )


    # SENTRY DSN:   <user>:<pass>@<domain>:port/<project_id>
    RAVEN_CONFIG = {
        'dsn': '<dsn_sentry>http://979d0ae573cd40cf9c4f3441f2402c1d:4d52c19474804fa9955d2c342569aed3@logs.openmooc.org:9000/4',
    }


    LOGGING = {
        'version': 1,
        'disable_existing_loggers': True,
        'filters': {
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse'
            }
        },
        'root': {
            'level': 'WARNING',
            'handlers': ['sentry'],
        },
        'handlers': {
            'console': {
                'level': 'WARNING',
                'class': 'logging.StreamHandler',
            },
            'sentry': {
                'level': 'WARNING',
                'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
            }
        },
        'loggers': {
            'django.request': {
                'handlers': ['console', 'sentry'],
                'level': 'ERROR',
                'propagate': False,
             },
            'djangosaml2': {
                'handlers': ['console', 'sentry'],
                'level': 'ERROR',
                'propagate': False,
            },
            'raven': {
                'level': 'ERROR',
                'handlers': ['console'],
                'propagate': False,
            },
            'sentry.errors': {
                'level': 'ERROR',
                'handlers': ['console'],
                'propagate': False,
            },
        }
    }






 Documentation References
=================================

 * `How install and configure a Sentry Server <http://sentry.readthedocs.org/en/latest/>`_
 * `HOw install and configure a Sentry Client (raven) in Django <http://raven.readthedocs.org/en/latest/config/django.html>`_
 * `Supervisor configuration <http://supervisord.org/configuration.html>`_
 * `Supervisor scriptinit <https://github.com/Supervisor/initscripts>`_
 

